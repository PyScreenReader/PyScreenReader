name: Release Pipeline
on:
  push:
    branches:
      - main
      - package # TODO: remove this once done testing
  repository_dispatch:
    types: [build-command]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # TODO: Also add macos, windows when the repo is public. These system costs a lot if the repo is private
        os: [ubuntu-24.04]
        python-version: [3.11, 3.12, 3.13]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # If invoked from pull request command, pull_request.head.sha will not be empty
          ref: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}

      - name: Setup Linux Native Libs
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libatk-bridge2.0-0 at-spi2-core libatspi2.0-dev libglib2.0-dev

      - name: Prepare Bazel Config
        working-directory: ${{ github.workspace }}
        run: |
          chmod +x ./.github/workflows/update_python_version.sh
          ./.github/workflows/update_python_version.sh ${{ matrix.python-version }}

#      - name: Run Basic Python Test Suite
#        run: |
#          bazel test //tests/py/...
#
#      - name: Run Basic C++ Test Suite
#        run: |
#          bazel test //tests/cpp/... --test_tag_filters=-no_ci

      - name: Build Wheel
        run: |
          bazel build //:dist
          WHEEL_FILE=$(ls bazel-bin/dist/*.whl)
          echo "Created wheel package: $WHEEL_FILE successfully"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # Note: this python version is the dev tool python version
          # which is isolated from ${{ matrix.python-version }}, which is the build version
          python-version: '3.12'

      - name: Install Anaconda Client
        run: |
          pip install --upgrade anaconda-client

      - name: Upload Wheel to Staging
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        run: |
          WHEEL_FILE=$(ls bazel-bin/dist/*.whl)
          set +x
          anaconda -t "$ANACONDA_API_TOKEN" upload "$WHEEL_FILE" --user lmh-java --label staging --force

  notify-on-success:
    name: Notify Caller on Success
    if: github.event_name == 'repository_dispatch'
    needs: build
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PR_NUMBER: ${{ github.event.client_payload.pull_request.number }}
    steps:
      - name: Notify Caller
        run: |
          gh pr comment "$PR_NUMBER" --body "✅ All builds for all Python versions completed successfully on all platforms. They were pushed to Anaconda Staging."

  failure-check:
    name: Notify on Failure
    if: ${{ failure() && github.event_name == 'repository_dispatch' }}
    needs: build
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PR_NUMBER: ${{ github.event.client_payload.pull_request.number }}
    steps:
      - name: Comment failure
        run: |
          ACTION_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          gh pr comment "$PR_NUMBER" --body "❌ One or more builds failed. Please check the [logs]($ACTION_URL) for details."
